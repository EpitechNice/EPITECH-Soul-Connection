{"version":3,"sources":["../../../../src/checkers/typescript/main.ts","../../../../../../node_modules/.pnpm/tsup@6.7.0_postcss@8.4.38_typescript@5.5.3/node_modules/tsup/assets/cjs_shims.js"],"sourcesContent":["import os from 'node:os'\nimport path from 'node:path'\nimport { fileURLToPath } from 'node:url'\nimport { parentPort } from 'node:worker_threads'\nimport invariant from 'tiny-invariant'\nimport ts from 'typescript'\n\nimport { Checker } from '../../Checker.js'\nimport {\n  consoleLog,\n  diagnosticToRuntimeError,\n  diagnosticToTerminalLog,\n  ensureCall,\n  normalizeTsDiagnostic,\n  toClientPayload,\n  wrapCheckerSummary,\n} from '../../logger.js'\nimport {\n  ACTION_TYPES,\n  type CreateDiagnostic,\n  type DiagnosticToRuntime,\n} from '../../types.js'\n\nconst __filename = fileURLToPath(import.meta.url)\nlet createServeAndBuild: any\n\nconst createDiagnostic: CreateDiagnostic<'typescript'> = (pluginConfig) => {\n  let overlay = true\n  let terminal = true\n  let currDiagnostics: DiagnosticToRuntime[] = []\n\n  return {\n    config: async ({ enableOverlay, enableTerminal }) => {\n      overlay = enableOverlay\n      terminal = enableTerminal\n    },\n    configureServer({ root }) {\n      invariant(pluginConfig.typescript, 'config.typescript should be `false`')\n      const finalConfig =\n        pluginConfig.typescript === true\n          ? { root, tsconfigPath: 'tsconfig.json' }\n          : {\n              root: pluginConfig.typescript.root ?? root,\n              tsconfigPath:\n                pluginConfig.typescript.tsconfigPath ?? 'tsconfig.json',\n            }\n\n      let configFile: string | undefined\n\n      configFile = ts.findConfigFile(\n        finalConfig.root,\n        ts.sys.fileExists,\n        finalConfig.tsconfigPath,\n      )\n\n      if (configFile === undefined) {\n        throw Error(\n          `Failed to find a valid tsconfig.json: ${finalConfig.tsconfigPath} at ${finalConfig.root} is not a valid tsconfig`,\n        )\n      }\n\n      let logChunk = ''\n\n      // https://github.com/microsoft/TypeScript/blob/a545ab1ac2cb24ff3b1aaf0bfbfb62c499742ac2/src/compiler/watch.ts#L12-L28\n      const reportDiagnostic = (diagnostic: ts.Diagnostic) => {\n        const normalizedDiagnostic = normalizeTsDiagnostic(diagnostic)\n        if (normalizedDiagnostic === null) {\n          return\n        }\n\n        currDiagnostics.push(diagnosticToRuntimeError(normalizedDiagnostic))\n        logChunk +=\n          os.EOL + diagnosticToTerminalLog(normalizedDiagnostic, 'TypeScript')\n      }\n\n      const reportWatchStatusChanged: ts.WatchStatusReporter = (\n        diagnostic,\n        newLine,\n        options,\n        errorCount,\n        // eslint-disable-next-line max-params\n      ) => {\n        if (diagnostic.code === 6031) return\n        // https://github.com/microsoft/TypeScript/issues/32542\n        // https://github.com/microsoft/TypeScript/blob/dc237b317ed4bbccd043ddda802ffde00362a387/src/compiler/diagnosticMessages.json#L4086-L4088\n        switch (diagnostic.code) {\n          case 6031:\n          case 6032:\n            // clear current error and use the newer errors\n            logChunk = ''\n            // currErr = null\n            currDiagnostics = []\n            return\n          case 6193: // 1 Error\n          case 6194: // 0 errors or 2+ errors\n            if (overlay) {\n              parentPort?.postMessage({\n                type: ACTION_TYPES.overlayError,\n                payload: toClientPayload('typescript', currDiagnostics),\n              })\n            }\n        }\n\n        ensureCall(() => {\n          if (errorCount === 0) {\n            logChunk = ''\n          }\n\n          if (terminal) {\n            consoleLog(\n              logChunk +\n                os.EOL +\n                wrapCheckerSummary(\n                  'TypeScript',\n                  diagnostic.messageText.toString(),\n                ),\n            )\n          }\n        })\n      }\n\n      // https://github.com/microsoft/TypeScript/issues/32385\n      // https://github.com/microsoft/TypeScript/pull/33082/files\n      const createProgram = ts.createEmitAndSemanticDiagnosticsBuilderProgram\n\n      if (\n        typeof pluginConfig.typescript === 'object' &&\n        pluginConfig.typescript.buildMode\n      ) {\n        const host = ts.createSolutionBuilderWithWatchHost(\n          ts.sys,\n          createProgram,\n          reportDiagnostic,\n          undefined,\n          reportWatchStatusChanged,\n        )\n\n        ts.createSolutionBuilderWithWatch(host, [configFile], {}).build()\n      } else {\n        const host = ts.createWatchCompilerHost(\n          configFile,\n          { noEmit: true },\n          ts.sys,\n          createProgram,\n          reportDiagnostic,\n          reportWatchStatusChanged,\n        )\n\n        ts.createWatchProgram(host)\n      }\n    },\n  }\n}\n\nexport class TscChecker extends Checker<'typescript'> {\n  public constructor() {\n    super({\n      name: 'typescript',\n      absFilePath: __filename,\n      build: {\n        buildBin: (config) => {\n          if (typeof config.typescript === 'object') {\n            const {\n              root = '',\n              tsconfigPath = '',\n              buildMode,\n            } = config.typescript\n\n            // Compiler option '--noEmit' may not be used with '--build'\n            const args = [buildMode ? '-b' : '--noEmit']\n\n            // Custom config path\n            let projectPath = ''\n            if (root || tsconfigPath) {\n              projectPath = root ? path.join(root, tsconfigPath) : tsconfigPath\n            }\n\n            if (projectPath) {\n              // In build mode, the tsconfig path is an argument to -b, e.g. \"tsc -b [path]\"\n              if (buildMode) {\n                args.push(projectPath)\n              } else {\n                args.push('-p', projectPath)\n              }\n            }\n\n            return ['tsc', args]\n          }\n\n          return ['tsc', ['--noEmit']]\n        },\n      },\n      createDiagnostic,\n    })\n  }\n\n  public init() {\n    const _createServeAndBuild = super.initMainThread()\n    createServeAndBuild = _createServeAndBuild\n    super.initWorkerThread()\n  }\n}\n\nexport { createServeAndBuild }\nconst tscChecker = new TscChecker()\ntscChecker.prepare()\ntscChecker.init()\n","// Shim globals in cjs bundle\n// There's a weird bug that esbuild will always inject importMetaUrl\n// if we export it as `const importMetaUrl = ... __filename ...`\n// But using a function will not cause this issue\n\nconst getImportMetaUrl = () =>\n  typeof document === 'undefined'\n    ? new URL('file:' + __filename).href\n    : (document.currentScript && document.currentScript.src) ||\n      new URL('main.js', document.baseURI).href\n\nexport const importMetaUrl = /* @__PURE__ */ getImportMetaUrl()\n"],"mappings":"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","names":["__filename","invariant","ts","os","path"]}