{"version":3,"sources":["../../../../src/checkers/eslint/main.ts","../../../../../../node_modules/.pnpm/tsup@6.7.0_postcss@8.4.38_typescript@5.5.3/node_modules/tsup/assets/cjs_shims.js"],"sourcesContent":["import Module from 'node:module'\nimport path from 'node:path'\nimport { fileURLToPath } from 'node:url'\nimport { parentPort } from 'node:worker_threads'\nimport chokidar from 'chokidar'\nimport { ESLint } from 'eslint'\nimport invariant from 'tiny-invariant'\n\nimport { Checker } from '../../Checker.js'\nimport { FileDiagnosticManager } from '../../FileDiagnosticManager.js'\nimport {\n  composeCheckerSummary,\n  consoleLog,\n  diagnosticToRuntimeError,\n  diagnosticToTerminalLog,\n  filterLogLevel,\n  normalizeEslintDiagnostic,\n  toClientPayload,\n} from '../../logger.js'\nimport { ACTION_TYPES, DiagnosticLevel } from '../../types.js'\nimport { translateOptions } from './cli.js'\nimport { options as optionator } from './options.js'\n\nconst __filename = fileURLToPath(import.meta.url)\nconst require = Module.createRequire(import.meta.url)\n\nconst manager = new FileDiagnosticManager()\nlet createServeAndBuild: any\n\nimport type { CreateDiagnostic } from '../../types'\nconst createDiagnostic: CreateDiagnostic<'eslint'> = (pluginConfig) => {\n  let overlay = true\n  let terminal = true\n\n  return {\n    config: async ({ enableOverlay, enableTerminal }) => {\n      overlay = enableOverlay\n      terminal = enableTerminal\n    },\n    async configureServer({ root }) {\n      if (!pluginConfig.eslint) return\n\n      const options = optionator.parse(pluginConfig.eslint.lintCommand)\n      invariant(\n        !options.fix,\n        'Using `--fix` in `config.eslint.lintCommand` is not allowed in vite-plugin-checker, you could using `--fix` with editor.',\n      )\n\n      const translatedOptions = translateOptions(options) as ESLint.Options\n\n      const logLevel = (() => {\n        if (typeof pluginConfig.eslint !== 'object') return undefined\n        const userLogLevel = pluginConfig.eslint.dev?.logLevel\n        if (!userLogLevel) return undefined\n        const map = {\n          error: DiagnosticLevel.Error,\n          warning: DiagnosticLevel.Warning,\n        } as const\n\n        return userLogLevel.map((l) => map[l])\n      })()\n\n      const eslintOptions: ESLint.Options = {\n        cwd: root,\n        ...translatedOptions,\n        ...pluginConfig.eslint.dev?.overrideConfig,\n      }\n\n      let eslint: ESLint\n      if (pluginConfig.eslint.useFlatConfig) {\n        const {\n          FlatESLint,\n          shouldUseFlatConfig,\n        } = require('eslint/use-at-your-own-risk')\n        if (shouldUseFlatConfig?.()) {\n          eslint = new FlatESLint({\n            cwd: root,\n          })\n        } else {\n          throw Error(\n            'Please upgrade your eslint to latest version to use `useFlatConfig` option.',\n          )\n        }\n      } else {\n        eslint = new ESLint(eslintOptions)\n      }\n\n      const dispatchDiagnostics = () => {\n        const diagnostics = filterLogLevel(manager.getDiagnostics(), logLevel)\n\n        if (terminal) {\n          for (const d of diagnostics) {\n            consoleLog(diagnosticToTerminalLog(d, 'ESLint'))\n          }\n\n          const errorCount = diagnostics.filter(\n            (d) => d.level === DiagnosticLevel.Error,\n          ).length\n          const warningCount = diagnostics.filter(\n            (d) => d.level === DiagnosticLevel.Warning,\n          ).length\n          consoleLog(composeCheckerSummary('ESLint', errorCount, warningCount))\n        }\n\n        if (overlay) {\n          parentPort?.postMessage({\n            type: ACTION_TYPES.overlayError,\n            payload: toClientPayload(\n              'eslint',\n              diagnostics.map((d) => diagnosticToRuntimeError(d)),\n            ),\n          })\n        }\n      }\n\n      const handleFileChange = async (\n        filePath: string,\n        type: 'change' | 'unlink',\n      ) => {\n        // See: https://github.com/eslint/eslint/pull/4465\n        const extension = path.extname(filePath)\n        const { extensions } = eslintOptions\n        const hasExtensionsConfig = Array.isArray(extensions)\n        if (hasExtensionsConfig && !extensions.includes(extension)) return\n\n        const isChangedFileIgnored = await eslint.isPathIgnored(filePath)\n        if (isChangedFileIgnored) return\n\n        const absPath = path.resolve(root, filePath)\n        if (type === 'unlink') {\n          manager.updateByFileId(absPath, [])\n        } else if (type === 'change') {\n          const diagnosticsOfChangedFile = await eslint.lintFiles(filePath)\n          const newDiagnostics = diagnosticsOfChangedFile.flatMap((d) =>\n            normalizeEslintDiagnostic(d),\n          )\n          manager.updateByFileId(absPath, newDiagnostics)\n        }\n\n        dispatchDiagnostics()\n      }\n\n      // initial lint\n      const files = options._.slice(1)\n      const diagnostics = await eslint.lintFiles(files)\n\n      manager.initWith(diagnostics.flatMap((p) => normalizeEslintDiagnostic(p)))\n      dispatchDiagnostics()\n\n      // watch lint\n      const watcher = chokidar.watch([], {\n        cwd: root,\n        ignored: (path: string) => path.includes('node_modules'),\n      })\n      watcher.add(files)\n      watcher.on('change', async (filePath) => {\n        handleFileChange(filePath, 'change')\n      })\n      watcher.on('unlink', async (filePath) => {\n        handleFileChange(filePath, 'unlink')\n      })\n    },\n  }\n}\n\nexport class EslintChecker extends Checker<'eslint'> {\n  public constructor() {\n    super({\n      name: 'eslint',\n      absFilePath: __filename,\n      build: {\n        buildBin: (pluginConfig) => {\n          if (pluginConfig.eslint) {\n            const { lintCommand } = pluginConfig.eslint\n            return ['eslint', lintCommand.split(' ').slice(1)]\n          }\n          return ['eslint', ['']]\n        },\n      },\n      createDiagnostic,\n    })\n  }\n\n  public init() {\n    const _createServeAndBuild = super.initMainThread()\n    createServeAndBuild = _createServeAndBuild\n    super.initWorkerThread()\n  }\n}\n\nexport { createServeAndBuild }\nconst eslintChecker = new EslintChecker()\neslintChecker.prepare()\neslintChecker.init()\n","// Shim globals in cjs bundle\n// There's a weird bug that esbuild will always inject importMetaUrl\n// if we export it as `const importMetaUrl = ... __filename ...`\n// But using a function will not cause this issue\n\nconst getImportMetaUrl = () =>\n  typeof document === 'undefined'\n    ? new URL('file:' + __filename).href\n    : (document.currentScript && document.currentScript.src) ||\n      new URL('main.js', document.baseURI).href\n\nexport const importMetaUrl = /* @__PURE__ */ getImportMetaUrl()\n"],"mappings":"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","names":["__filename","require","Module","optionator","invariant","_a","diagnostics","path","chokidar"]}