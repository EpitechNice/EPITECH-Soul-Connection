{"version":3,"sources":["../../../../src/checkers/biome/cli.ts"],"sourcesContent":["import { exec } from 'node:child_process'\nimport path from 'node:path'\nimport strip from 'strip-ansi'\nimport { createFrame } from '../../codeFrame.js'\nimport type { NormalizedDiagnostic } from '../../logger.js'\nimport { DiagnosticLevel } from '../../types.js'\nimport type { BiomeOutput } from './types.js'\n\nexport const severityMap = {\n  error: DiagnosticLevel.Error,\n  warning: DiagnosticLevel.Warning,\n  info: DiagnosticLevel.Suggestion,\n} as const\n\nexport function getBiomeCommand(command: string, flags: string, files: string) {\n  const defaultFlags = '--reporter json'\n  if (flags.includes('--flags')) {\n    throw Error(\n      `vite-plugin-checker will force append \"--reporter json\" to the flags in dev mode, please don't use \"--flags\" in \"config.biome.flags\".\nIf you need to customize \"--flags\" in build mode, please use \"config.biome.build.flags\" instead.`,\n    )\n  }\n  return ['biome', command, flags, defaultFlags, files]\n    .filter(Boolean)\n    .join(' ')\n}\n\nexport function runBiome(command: string, cwd: string) {\n  return new Promise<NormalizedDiagnostic[]>((resolve, reject) => {\n    exec(\n      command,\n      {\n        cwd,\n      },\n      (error, stdout, stderr) => {\n        resolve([...parseBiomeOutput(stdout)])\n      },\n    )\n  })\n}\n\nfunction parseBiomeOutput(output: string) {\n  let parsed: BiomeOutput\n  try {\n    parsed = JSON.parse(output)\n  } catch (e) {\n    return []\n  }\n\n  const diagnostics: NormalizedDiagnostic[] = parsed.diagnostics.map((d) => {\n    let file = d.location.path?.file\n    if (file) file = path.normalize(file)\n\n    const loc = {\n      file: file || '',\n      start: getLineAndColumn(d.location.sourceCode, d.location.span?.[0]),\n      end: getLineAndColumn(d.location.sourceCode, d.location.span?.[1]),\n    }\n\n    const codeFrame = createFrame(d.location.sourceCode || '', loc)\n\n    return {\n      message: `[${d.category}] ${d.description}`,\n      conclusion: '',\n      level:\n        severityMap[d.severity as keyof typeof severityMap] ??\n        DiagnosticLevel.Error,\n      checker: 'Biome',\n      id: file,\n      codeFrame,\n      stripedCodeFrame: codeFrame && strip(codeFrame),\n      loc,\n    }\n  })\n\n  return diagnostics\n}\n\nfunction getLineAndColumn(text?: string, offset?: number) {\n  if (!text || !offset) return { line: 0, column: 0 }\n\n  let line = 1\n  let column = 1\n\n  for (let i = 0; i < offset; i++) {\n    if (text[i] === '\\n') {\n      line++\n      column = 1\n    } else {\n      column++\n    }\n  }\n\n  return { line, column }\n}\n"],"mappings":"AAAA,SAAS,YAAY;AACrB,OAAO,UAAU;AACjB,OAAO,WAAW;AAClB,SAAS,mBAAmB;AAE5B,SAAS,uBAAuB;AAGzB,MAAM,cAAc;AAAA,EACzB,OAAO,gBAAgB;AAAA,EACvB,SAAS,gBAAgB;AAAA,EACzB,MAAM,gBAAgB;AACxB;AAEO,SAAS,gBAAgB,SAAiB,OAAe,OAAe;AAC7E,QAAM,eAAe;AACrB,MAAI,MAAM,SAAS,SAAS,GAAG;AAC7B,UAAM;AAAA,MACJ;AAAA;AAAA,IAEF;AAAA,EACF;AACA,SAAO,CAAC,SAAS,SAAS,OAAO,cAAc,KAAK,EACjD,OAAO,OAAO,EACd,KAAK,GAAG;AACb;AAEO,SAAS,SAAS,SAAiB,KAAa;AACrD,SAAO,IAAI,QAAgC,CAAC,SAAS,WAAW;AAC9D;AAAA,MACE;AAAA,MACA;AAAA,QACE;AAAA,MACF;AAAA,MACA,CAAC,OAAO,QAAQ,WAAW;AACzB,gBAAQ,CAAC,GAAG,iBAAiB,MAAM,CAAC,CAAC;AAAA,MACvC;AAAA,IACF;AAAA,EACF,CAAC;AACH;AAEA,SAAS,iBAAiB,QAAgB;AACxC,MAAI;AACJ,MAAI;AACF,aAAS,KAAK,MAAM,MAAM;AAAA,EAC5B,SAAS,GAAP;AACA,WAAO,CAAC;AAAA,EACV;AAEA,QAAM,cAAsC,OAAO,YAAY,IAAI,CAAC,MAAM;AAjD5E;AAkDI,QAAI,QAAO,OAAE,SAAS,SAAX,mBAAiB;AAC5B,QAAI;AAAM,aAAO,KAAK,UAAU,IAAI;AAEpC,UAAM,MAAM;AAAA,MACV,MAAM,QAAQ;AAAA,MACd,OAAO,iBAAiB,EAAE,SAAS,aAAY,OAAE,SAAS,SAAX,mBAAkB,EAAE;AAAA,MACnE,KAAK,iBAAiB,EAAE,SAAS,aAAY,OAAE,SAAS,SAAX,mBAAkB,EAAE;AAAA,IACnE;AAEA,UAAM,YAAY,YAAY,EAAE,SAAS,cAAc,IAAI,GAAG;AAE9D,WAAO;AAAA,MACL,SAAS,IAAI,EAAE,aAAa,EAAE;AAAA,MAC9B,YAAY;AAAA,MACZ,OACE,YAAY,EAAE,QAAoC,KAClD,gBAAgB;AAAA,MAClB,SAAS;AAAA,MACT,IAAI;AAAA,MACJ;AAAA,MACA,kBAAkB,aAAa,MAAM,SAAS;AAAA,MAC9C;AAAA,IACF;AAAA,EACF,CAAC;AAED,SAAO;AACT;AAEA,SAAS,iBAAiB,MAAe,QAAiB;AACxD,MAAI,CAAC,QAAQ,CAAC;AAAQ,WAAO,EAAE,MAAM,GAAG,QAAQ,EAAE;AAElD,MAAI,OAAO;AACX,MAAI,SAAS;AAEb,WAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC/B,QAAI,KAAK,CAAC,MAAM,MAAM;AACpB;AACA,eAAS;AAAA,IACX,OAAO;AACL;AAAA,IACF;AAAA,EACF;AAEA,SAAO,EAAE,MAAM,OAAO;AACxB;","names":[]}