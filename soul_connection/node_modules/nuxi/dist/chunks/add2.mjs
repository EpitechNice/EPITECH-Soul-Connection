import { d as defineCommand, c as consola, a as colors } from '../shared/nuxi.fefc5017.mjs';
import 'node:util';
import { dirname, extname } from 'node:path';
import 'node:process';
import 'node:tty';
import { a as addDependency } from '../shared/nuxi.e6ef3ea5.mjs';
import { g as getProjectPackage, f as fetchModules, a as getNuxtVersion, c as checkNuxtCompatibility, $ as $fetch } from '../shared/nuxi.11eb953d.mjs';
import { s as semver } from '../shared/nuxi.15c58622.mjs';
import { r as resolvePath } from '../shared/nuxi.cd7bfae6.mjs';
import { S as SUPPORTED_EXTENSIONS } from '../shared/nuxi.16bb8ddb.mjs';
import { mkdir, writeFile, readFile } from 'node:fs/promises';
import 'node:fs';
import 'node:os';
import 'crypto';
import 'fs';
import 'module';
import 'path';
import 'perf_hooks';
import 'os';
import 'vm';
import 'url';
import 'assert';
import 'process';
import 'v8';
import 'util';
import 'tty';
import { j as join, s as sharedArgs, r as resolve } from '../shared/nuxi.610c92ff.mjs';
import 'node:url';
import 'node:module';
import '../shared/nuxi.de533993.mjs';
import 'node:http';
import 'node:https';
import 'node:zlib';
import 'node:stream';
import 'node:buffer';
import 'node:net';
import '../shared/nuxi.4ac76f59.mjs';
import '../shared/nuxi.deb0a220.mjs';
import '../shared/nuxi.5aaa4630.mjs';
import './satisfies.mjs';
import '../shared/nuxi.2155838d.mjs';
import 'node:assert';
import 'node:v8';

const UPDATABLE_EXTS = [".js", ".ts", ".mjs", ".cjs", ".mts", ".cts"];
async function updateConfig(opts) {
  const { parseModule } = await import('./index9.mjs');
  let configFile = await _tryResolve(
    `./${opts.configFile}`,
    opts.cwd,
    SUPPORTED_EXTENSIONS
  ) || await _tryResolve(
    `./.config/${opts.configFile}`,
    opts.cwd,
    SUPPORTED_EXTENSIONS
  );
  let created = false;
  if (!configFile) {
    configFile = join(
      opts.cwd,
      opts.configFile + (opts.createExtension || ".ts")
    );
    const createResult = await opts.onCreate?.({ configFile }) ?? true;
    if (!createResult) {
      throw new Error("Config file creation aborted.");
    }
    const content = typeof createResult === "string" ? createResult : `export default {}
`;
    await mkdir(dirname(configFile), { recursive: true });
    await writeFile(configFile, content, "utf8");
    created = true;
  }
  const ext = extname(configFile);
  if (!UPDATABLE_EXTS.includes(ext)) {
    throw new Error(
      `Unsupported config file extension: ${ext} (${configFile}) (supported: ${UPDATABLE_EXTS.join(", ")})`
    );
  }
  const contents = await readFile(configFile, "utf8");
  const _module = parseModule(contents, opts.magicast);
  const defaultExport = _module.exports.default;
  if (!defaultExport) {
    throw new Error("Default export is missing in the config file!");
  }
  const configObj = defaultExport.$type === "function-call" ? defaultExport.$args[0] : defaultExport;
  await opts.onUpdate?.(configObj);
  await writeFile(configFile, _module.generate().code);
  return {
    configFile,
    created
  };
}
function _tryResolve(path, cwd, exts) {
  return resolvePath(path, {
    url: cwd,
    extensions: exts
  }).catch(() => void 0);
}

const add = defineCommand({
  meta: {
    name: "add",
    description: "Add Nuxt modules"
  },
  args: {
    ...sharedArgs,
    moduleName: {
      type: "positional",
      description: "Module name"
    },
    skipInstall: {
      type: "boolean",
      description: "Skip npm install"
    },
    skipConfig: {
      type: "boolean",
      description: "Skip nuxt.config.ts update"
    }
  },
  async setup(ctx) {
    const cwd = resolve(ctx.args.cwd || ".");
    const projectPkg = await getProjectPackage(cwd);
    if (!projectPkg.dependencies?.nuxt && !projectPkg.devDependencies?.nuxt) {
      consola.warn(`No \`nuxt\` dependency detected in \`${cwd}\`.`);
      const shouldContinue = await consola.prompt(
        `Do you want to continue anyway?`,
        {
          type: "confirm",
          initial: false
        }
      );
      if (shouldContinue !== true) {
        return false;
      }
    }
    const r = await resolveModule(ctx.args.moduleName, cwd);
    if (r === false) {
      return;
    }
    if (!ctx.args.skipInstall) {
      const isDev = Boolean(projectPkg.devDependencies?.nuxt);
      consola.info(
        `Installing \`${r.pkg}\`${isDev ? " development" : ""} dependency`
      );
      const res = await addDependency(r.pkg, { cwd, dev: isDev, installPeerDependencies: true }).catch(
        (error) => {
          consola.error(error);
          return consola.prompt(
            `Install failed for ${colors.cyan(
              r.pkg
            )}. Do you want to continue adding the module to ${colors.cyan(
              "nuxt.config"
            )}?`,
            {
              type: "confirm",
              initial: false
            }
          );
        }
      );
      if (res === false) {
        return;
      }
    }
    if (!ctx.args.skipConfig) {
      await updateConfig({
        cwd,
        configFile: "nuxt.config",
        async onCreate() {
          consola.info(`Creating \`nuxt.config.ts\``);
          return getDefaultNuxtConfig();
        },
        async onUpdate(config) {
          if (!config.modules) {
            config.modules = [];
          }
          if (config.modules.includes(r.pkgName)) {
            consola.info(`\`${r.pkgName}\` is already in the \`modules\``);
            return;
          }
          consola.info(`Adding \`${r.pkgName}\` to the \`modules\``);
          config.modules.push(r.pkgName);
        }
      }).catch((error) => {
        consola.error(`Failed to update \`nuxt.config\`: ${error.message}`);
        consola.error(`Please manually add \`${r.pkgName}\` to the \`modules\` in \`nuxt.config.ts\``);
        return null;
      });
    }
  }
});
function getDefaultNuxtConfig() {
  return `
// https://nuxt.com/docs/api/configuration/nuxt-config
export default defineNuxtConfig({
  modules: []
})`;
}
const packageRegex = /^(@[a-z0-9-~][a-z0-9-._~]*\/)?([a-z0-9-~][a-z0-9-._~]*)(@[^@]+)?$/;
async function resolveModule(moduleName, cwd) {
  let pkgName = moduleName;
  let pkgVersion;
  const reMatch = moduleName.match(packageRegex);
  if (reMatch) {
    if (reMatch[3]) {
      pkgName = `${reMatch[1] || ""}${reMatch[2] || ""}`;
      pkgVersion = reMatch[3].slice(1);
    }
  } else {
    consola.error(`Invalid package name \`${pkgName}\`.`);
    return false;
  }
  const modulesDB = await fetchModules().catch((err) => {
    consola.warn("Cannot search in the Nuxt Modules database: " + err);
    return [];
  });
  const matchedModule = modulesDB.find(
    (module) => module.name === moduleName || module.npm === pkgName || module.aliases?.includes(pkgName)
  );
  if (matchedModule?.npm) {
    pkgName = matchedModule.npm;
  }
  if (matchedModule && matchedModule.compatibility.nuxt) {
    const nuxtVersion = await getNuxtVersion(cwd);
    if (!checkNuxtCompatibility(matchedModule, nuxtVersion)) {
      consola.warn(
        `The module \`${pkgName}\` is not compatible with Nuxt \`${nuxtVersion}\` (requires \`${matchedModule.compatibility.nuxt}\`)`
      );
      const shouldContinue = await consola.prompt(
        "Do you want to continue installing incompatible version?",
        {
          type: "confirm",
          initial: false
        }
      );
      if (shouldContinue !== true) {
        return false;
      }
    }
    const versionMap = matchedModule.compatibility.versionMap;
    if (versionMap) {
      for (const [_nuxtVersion, _moduleVersion] of Object.entries(versionMap)) {
        if (semver.satisfies(nuxtVersion, _nuxtVersion)) {
          if (!pkgVersion) {
            pkgVersion = _moduleVersion;
          } else {
            consola.warn(
              `Recommended version of \`${pkgName}\` for Nuxt \`${nuxtVersion}\` is \`${_moduleVersion}\` but you have requested \`${pkgVersion}\``
            );
            pkgVersion = await consola.prompt("Choose a version:", {
              type: "select",
              options: [_moduleVersion, pkgVersion]
            });
          }
          break;
        }
      }
    }
  }
  pkgVersion = pkgVersion || "latest";
  const pkg = await $fetch(
    `https://registry.npmjs.org/${pkgName}/${pkgVersion}`
  );
  const pkgDependencies = Object.assign(
    pkg.dependencies || {},
    pkg.devDependencies || {}
  );
  if (!pkgDependencies["nuxt"] && !pkgDependencies["nuxt-edge"] && !pkgDependencies["@nuxt/kit"]) {
    consola.warn(`It seems that \`${pkgName}\` is not a Nuxt module.`);
    const shouldContinue = await consola.prompt(
      `Do you want to continue installing \`${pkgName}\` anyway?`,
      {
        type: "confirm",
        initial: false
      }
    );
    if (shouldContinue !== true) {
      return false;
    }
  }
  return {
    nuxtModule: matchedModule,
    pkg: `${pkgName}@${pkgVersion}`,
    pkgName,
    pkgVersion
  };
}

export { add as default };
